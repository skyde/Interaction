" .vsvimrc â€” LazyVim-style for Visual Studio + C++

" Leader key setup
let mapleader = " "
let maplocalleader = ","

" User Interface
set number
set relativenumber
set cursorline
set scrolloff=5

" Search
set ignorecase
set smartcase
set incsearch
set hlsearch

" Reload vimrc
map zl :so ~/.vsvimrc<CR>

" Unbinds the Space key as it's used as the leader key
nnoremap <Space> <NOP>

" `Esc` - Remove search highlights
nnoremap <Esc> :nohl<CR>

" Improves navigation when wrapping by swapping `j` with `gj` and `k` with `gk`
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" Using arrow keys due to alternate key layout - make these behave nicer
nnoremap <Left> h
nnoremap <Down> j
nnoremap <Up> k
nnoremap <Right> l

" Easy scrolling - Optimized for Colmak Mod DH
nnoremap st <C-d>
nnoremap ts <C-u>
nnoremap tt <C-f>
nnoremap ss <C-b>
nnoremap <C-u> 16k
nnoremap <C-d> 16j

" Macro Actions
" Move down 16 lines on Shift+F4 (maps to macro)
nnoremap <S-F4> <C-u>

" Move up 16 lines on Shift+F6 (maps to macro)
nnoremap <S-F6> <C-d>

" Visual-mode reselect indenting
vnoremap < <gv
vnoremap > >gv

" Window/tab navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <S-l> :vsc Window.NextTab<CR>
nnoremap <S-h> :vsc Window.PreviousTab<CR>
nnoremap <leader><leader> :vsc ReSharper.ReSharper_GotoFile<CR>

" File ops
" nnoremap <leader>fx :vsc File.Close<CR>
nnoremap <leader>fm :vsc File.TfsOpenInFileExplorer<CR>
nnoremap <leader>fs :vsc File.SaveAll<CR>
" nnoremap <leader>fq  :vsc File.Close<CR>

" Solution Explorer and Terminal
nnoremap <leader>e :vsc View.SolutionExplorer<CR>
nnoremap <leader>t :vsc View.Terminal<CR>

" Goto 
nnoremap gd :vsc Edit.GoToDefinition<CR>
nnoremap gi :vsc Edit.GoToImplementation<CR>
nnoremap gr :vsc Edit.FindAllReferences<CR>
nnoremap gk :vsc Edit.PreviousMethod<CR>
nnoremap gj :vsc Edit.NextMethod<CR>
nnoremap gu :vsc ReSharper.ReSharper_GotoUsage<CR>
nnoremap gc :vsc Edit.ToggleComment<CR>
nnoremap gh :vsc EditorContextMenus.CodeWindow.ToggleHeaderCodeFile<CR>

" Git (Version Control)
nnoremap <leader>gd :vsc P4EditVS.Diff<CR>
nnoremap <leader>go :vsc P4EditVS.OpenInP4V<CR>

" Code
nnoremap <leader>cr :vsc ReSharper.ReSharper_Rename<CR>
nnoremap <leader>cR :vsc File.Rename<CR>

nnoremap <leader>. :vsc View.QuickActionsForPosition<CR>

" Error & diagnostics navigation
nnoremap <leader>ee :vsc View.ErrorList<CR>
nnoremap <leader>en :vsc View.NextError<CR>
nnoremap <leader>ep :vsc View.PreviousError<CR>

" Split/Tab Group management
nnoremap ]b :vsc Window.NextTab<CR>
nnoremap [b :vsc Window.PreviousTab<CR>
nnoremap <leader>bd :vsc Window.CloseDocumentWindow<CR>
nnoremap <leader>bp :vsc Window.PinTab<CR>
nnoremap <leader>bP :vsc Window.CloseAllButPinned<CR>

" Clipboard and backspace support
set clipboard=unnamed
set backspace=indent,eol,start

" Peasy Motion
" gS prefix is added for ViEmu, no use for VsVim AFAIK.
"VsVim and ViEmu are disabled until PeasyMotion finishes

"Whole viewport jump-to-word beginning mode:
" nnoremap ;x gS:vsc Tools.InvokePeasyMotion<CR>

"Select text from current caret position to desired jump label (fwd and reverse directions supported)
nmap ;; gS:vsc Tools.InvokePeasyMotionTextSelect<CR>

"Jump to word beginning in current line
" nmap zw gS:vsc Tools.InvokePeasyMotionLineJumpToWordBegining<CR>
"Jump to word ending in current line
" nmap ze gS:vsc Tools.InvokePeasyMotionLineJumpToWordEnding<CR>

"Jump to any open document tab
nmap S gS:vsc Tools.InvokePeasyMotionJumpToDocumentTab<CR>

"Jump to line beginning:
" nmap ;l gS:vsc Tools.InvokePeasyMotionJumpToLineBegining<CR>

"Two char search mode:
nmap s gS:vsc Tools.InvokePeasyMotionTwoCharJump<CR>

"One char search mode:
" nmap ;v gS:vsc Tools.InvokePeasyMotionOneCharJump<CR>


" Resharper
" `]` - Navigate to the next member / type / tag
" `[` - Navigate to the previous member / type / tag
noremap ] :vsc ReSharper.ReSharper_GotoNextMember<CR>
noremap [ :vsc ReSharper.ReSharper_GotoPrevMember<CR>

map <Space>tr :vsc ReSharper.ReSharper_UnitTestRunFromContext<CR>
map <Space>td :vsc ReSharper.ReSharper_UnitTestDebugContext<CR>
map <Space>ta :vsc ReSharper.ReSharper_UnitTestRunSolution<CR>
map <Space>tl :vsc ReSharper.ReSharper_UnitTestSessionRepeatPreviousRun<CR>
map <Space>tt :vsc ReSharper.ReSharper_ShowUnitTestSessions<CR>

map <Space>e :vsc ReSharper.ReSharper_GotoNextErrorInSolution<CR>
map <Space>E :vsc ReSharper.ReSharper_GotoPrevErrorInSolution<CR>

" Jump back through edits
nmap <C-O> :vsc View.NavigateBackward<CR>
" Jump forward through ReSharper navigation history
nmap <C-I> :vsc View.NavigateForward<CR>

" Build (Make)
map <Space>mb :vsc Build.BuildSolution<CR>
map <Space>mc :vsc Build.Cancel<CR>
map <Space>mr :vsc Debug.Start<CR>
map <Space>ms :vsc Debug.StopDebugging<CR>

" Fuzzy Find

" Memonic is 'search grep'
map <Space>sg :vsc Tools.FastFind.OpenDocked<CR>

" Window

" Set fullscreen mode using a plugin called 'Minimal VS Plugin' (the memonic is Window -> Fullscreen)
nnoremap <leader>wf :vsc View.Hidemenu<CR>
" nnoremap <leader>ws :vsc Window.NewVerticalTabGroup<CR>
" nnoremap <leader>wv :vsc Window.Split<CR>
" nnoremap <leader>wr :vsc Window.RemoveSplit<CR>

" `<leader> + w(indow) + p(in)` - Toggle the pin status of the document
" `<leader> + w(indows) + c(lose) + a(ll)` - Close all unpinned documents
noremap <leader>wp :vsc Window.PinTab<CR>
noremap <leader>wP :vsc Window.CloseAllButPinned<CR>

" Debug

" b(reakpoint) - Toggle a breakpoint at the current line
noremap <leader>db :vsc Debug.ToggleBreakpoint<CR>
" d(isable) - Disable all breakpoins
noremap <leader>dd :vsc Debug.DisableAllBreakpoints<CR>
" e(nable) - Enable all breakpoints
noremap <leader>de :vsc Debug.EnableAllBreakpoints<CR>
" r(emove) - Remove all breakpoints
noremap <leader>dr :vsc Debug.DeleteAllBreakpoints<CR>
" a(ll) - Show the breakpoints list
noremap <leader>da :vsc Debug.Breakpoints<CR>
" c(ontinue) - Continue exeuction of the program
noremap <leader>dc :vsc Debug.Start<CR>

" <leader> + q(ick) + w(atch) - Show the QuickWatch dialog box
nnoremap <Leader>dw :vsc Debug.QuickWatch<CR>

" Note these are optimized for Colemak - for qwerty you would want to use HJKL

" Up runs the program to the highlighted line
nnoremap <Leader>de :vsc Debug.SetNextStatement<CR>
" Down steps the program once
nnoremap <Leader>dn :vsc Debug.StepOver<CR>
" Right steps into the current statement
nnoremap <Leader>di :vsc Debug.StepInto<CR>
" Left steps out of the current context
nnoremap <Leader>dm :vsc Debug.StepOut<CR>